I am confued about the tensorflow algorhtms rewrite it fully

Heres what i want it to do.

It should have a head deteciton model that can detect heads from an overhead view   -opensource would work the best - use like yolo or some other good Head detection algorithm

use the heads detected and use it to put it into the head detection and proximity branches. The bracnhes have to be implemented in tensorflow. Draw a box around all the heads using openCV



for the proximity detection branch - use tensorflow any calcyultion library to calculate the distance beteween all the heads. This is what the whole branch has to do
 Calculate the spatial distance between annotated heads. - Distance Matrix
Identify clusters of heads based on their proximity to each other.
Assign a higher proximity score to heads that belong to larger clusters, indicating higher engagement.
Normalize the proximity scores between 0 and 1, where 0 represents minimal proximity and 1 represents maximum proximity engage
It should be like this in code form a little
# Calculate distance matrix between head positions
    distance_matrix = calculate_distance_matrix(head_positions)
    
    # Perform clustering on the distance matrix
    clustering = KMeans(n_clusters=5)  # Adjust the number of clusters based on your specific scenario
    labels = clustering.fit_predict(distance_matrix)
    
    # Count the number of heads in each cluster
    cluster_sizes = [np.sum(labels == label) for label in set(labels)]
    
    # Assign proximity scores based on cluster sizes
    proximity_scores = [size for size in cluster_sizes]  # Customize the calculation based on your preference
    
    # Normalize proximity scores between 0 and 1
    scaler = MinMaxScaler()
    normalized_scores = scaler.fit_transform(np.array(proximity_scores).reshape(-1, 1))
    
    return normalized_scores.flatten()
try using tensorflow where you can - this branch has to be trainable and it should learn from data

both of these branches and the whole algorithm has to trainable - I have to see loss go down and go up - specifty what type of data I need for the model exactly 


 Also make code so that all the branches combine there scores into one score that is outputted
